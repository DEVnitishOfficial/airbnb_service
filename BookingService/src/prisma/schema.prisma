// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// A generator determines which assets are created when you run the prisma generate command.
// When Prisma says “assets,” it means the code and tooling (like the Prisma Client) that get automatically created in the file system based on your schema

generator client {
  provider = "prisma-client-js" //prisma-client-js: Generates Prisma Client into node_modules
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Booking{
  id                Int   @id         @default(autoincrement())
  userId            Int
  hotelId           Int
  checkInDate       DateTime
  checkOutDate      DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  bookingAmount     Int
  roomCategoryId    Int
  status            BookingStatus     @default(PENDING)
  totalGuests       Int
  idempotencyKey    IdempotencyKey? // idempotencyKey is a virtual field that references the IdempotencyKey model, that's why it will not appear in the database.
  // Here idempotency key references the IdempotencyKey model which will provide a unique key for each booking request to ensure idempotency.
}
model IdempotencyKey {
  id                Int              @id @default(autoincrement())
  idemKey           String           @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  finalized         Boolean          @default(false) // if it's true, it means the idempotency key has completed their full lifecycle, and a successful booking has been created. if the same idempotency key came for booking then we don't have to process the query or create a new booking, we can just return the existing booking.
  bookingId         Int              @unique // it's a foreign key that used in making actual relationship in db, that's why it will appear in the database.
  booking           Booking?         @relation(fields: [bookingId], references: [id]) // booking is a virtual field that references the Booking model to make a relationship, that's why it will not appear in the database.
  // The bookingId field is a foreign key that references the Booking model, allowing us to link the idempotency key to a specific booking.
  // Here, relation is like booking shows ---> Booking.id, from Booking model, and bookingId is a foreign key that references the Booking model.
}
enum BookingStatus{
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  CHECKED_IN
  CHECKED_OUT
}
